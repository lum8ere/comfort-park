// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed-api/pkg/db/model"
)

func newDictsBuildingCategory(db *gorm.DB, opts ...gen.DOOption) dictsBuildingCategory {
	_dictsBuildingCategory := dictsBuildingCategory{}

	_dictsBuildingCategory.dictsBuildingCategoryDo.UseDB(db, opts...)
	_dictsBuildingCategory.dictsBuildingCategoryDo.UseModel(&model.DictsBuildingCategory{})

	tableName := _dictsBuildingCategory.dictsBuildingCategoryDo.TableName()
	_dictsBuildingCategory.ALL = field.NewAsterisk(tableName)
	_dictsBuildingCategory.ID = field.NewString(tableName, "id")
	_dictsBuildingCategory.Code = field.NewString(tableName, "code")
	_dictsBuildingCategory.Name = field.NewString(tableName, "name")
	_dictsBuildingCategory.IsActive = field.NewBool(tableName, "is_active")

	_dictsBuildingCategory.fillFieldMap()

	return _dictsBuildingCategory
}

type dictsBuildingCategory struct {
	dictsBuildingCategoryDo

	ALL      field.Asterisk
	ID       field.String
	Code     field.String
	Name     field.String
	IsActive field.Bool

	fieldMap map[string]field.Expr
}

func (d dictsBuildingCategory) Table(newTableName string) *dictsBuildingCategory {
	d.dictsBuildingCategoryDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dictsBuildingCategory) As(alias string) *dictsBuildingCategory {
	d.dictsBuildingCategoryDo.DO = *(d.dictsBuildingCategoryDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dictsBuildingCategory) updateTableName(table string) *dictsBuildingCategory {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Code = field.NewString(table, "code")
	d.Name = field.NewString(table, "name")
	d.IsActive = field.NewBool(table, "is_active")

	d.fillFieldMap()

	return d
}

func (d *dictsBuildingCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dictsBuildingCategory) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["code"] = d.Code
	d.fieldMap["name"] = d.Name
	d.fieldMap["is_active"] = d.IsActive
}

func (d dictsBuildingCategory) clone(db *gorm.DB) dictsBuildingCategory {
	d.dictsBuildingCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dictsBuildingCategory) replaceDB(db *gorm.DB) dictsBuildingCategory {
	d.dictsBuildingCategoryDo.ReplaceDB(db)
	return d
}

type dictsBuildingCategoryDo struct{ gen.DO }

type IDictsBuildingCategoryDo interface {
	gen.SubQuery
	Debug() IDictsBuildingCategoryDo
	WithContext(ctx context.Context) IDictsBuildingCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDictsBuildingCategoryDo
	WriteDB() IDictsBuildingCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDictsBuildingCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDictsBuildingCategoryDo
	Not(conds ...gen.Condition) IDictsBuildingCategoryDo
	Or(conds ...gen.Condition) IDictsBuildingCategoryDo
	Select(conds ...field.Expr) IDictsBuildingCategoryDo
	Where(conds ...gen.Condition) IDictsBuildingCategoryDo
	Order(conds ...field.Expr) IDictsBuildingCategoryDo
	Distinct(cols ...field.Expr) IDictsBuildingCategoryDo
	Omit(cols ...field.Expr) IDictsBuildingCategoryDo
	Join(table schema.Tabler, on ...field.Expr) IDictsBuildingCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDictsBuildingCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDictsBuildingCategoryDo
	Group(cols ...field.Expr) IDictsBuildingCategoryDo
	Having(conds ...gen.Condition) IDictsBuildingCategoryDo
	Limit(limit int) IDictsBuildingCategoryDo
	Offset(offset int) IDictsBuildingCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDictsBuildingCategoryDo
	Unscoped() IDictsBuildingCategoryDo
	Create(values ...*model.DictsBuildingCategory) error
	CreateInBatches(values []*model.DictsBuildingCategory, batchSize int) error
	Save(values ...*model.DictsBuildingCategory) error
	First() (*model.DictsBuildingCategory, error)
	Take() (*model.DictsBuildingCategory, error)
	Last() (*model.DictsBuildingCategory, error)
	Find() ([]*model.DictsBuildingCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictsBuildingCategory, err error)
	FindInBatches(result *[]*model.DictsBuildingCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DictsBuildingCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDictsBuildingCategoryDo
	Assign(attrs ...field.AssignExpr) IDictsBuildingCategoryDo
	Joins(fields ...field.RelationField) IDictsBuildingCategoryDo
	Preload(fields ...field.RelationField) IDictsBuildingCategoryDo
	FirstOrInit() (*model.DictsBuildingCategory, error)
	FirstOrCreate() (*model.DictsBuildingCategory, error)
	FindByPage(offset int, limit int) (result []*model.DictsBuildingCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDictsBuildingCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dictsBuildingCategoryDo) Debug() IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Debug())
}

func (d dictsBuildingCategoryDo) WithContext(ctx context.Context) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dictsBuildingCategoryDo) ReadDB() IDictsBuildingCategoryDo {
	return d.Clauses(dbresolver.Read)
}

func (d dictsBuildingCategoryDo) WriteDB() IDictsBuildingCategoryDo {
	return d.Clauses(dbresolver.Write)
}

func (d dictsBuildingCategoryDo) Session(config *gorm.Session) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Session(config))
}

func (d dictsBuildingCategoryDo) Clauses(conds ...clause.Expression) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dictsBuildingCategoryDo) Returning(value interface{}, columns ...string) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dictsBuildingCategoryDo) Not(conds ...gen.Condition) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dictsBuildingCategoryDo) Or(conds ...gen.Condition) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dictsBuildingCategoryDo) Select(conds ...field.Expr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dictsBuildingCategoryDo) Where(conds ...gen.Condition) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dictsBuildingCategoryDo) Order(conds ...field.Expr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dictsBuildingCategoryDo) Distinct(cols ...field.Expr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dictsBuildingCategoryDo) Omit(cols ...field.Expr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dictsBuildingCategoryDo) Join(table schema.Tabler, on ...field.Expr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dictsBuildingCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dictsBuildingCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dictsBuildingCategoryDo) Group(cols ...field.Expr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dictsBuildingCategoryDo) Having(conds ...gen.Condition) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dictsBuildingCategoryDo) Limit(limit int) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dictsBuildingCategoryDo) Offset(offset int) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dictsBuildingCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dictsBuildingCategoryDo) Unscoped() IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dictsBuildingCategoryDo) Create(values ...*model.DictsBuildingCategory) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dictsBuildingCategoryDo) CreateInBatches(values []*model.DictsBuildingCategory, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dictsBuildingCategoryDo) Save(values ...*model.DictsBuildingCategory) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dictsBuildingCategoryDo) First() (*model.DictsBuildingCategory, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsBuildingCategory), nil
	}
}

func (d dictsBuildingCategoryDo) Take() (*model.DictsBuildingCategory, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsBuildingCategory), nil
	}
}

func (d dictsBuildingCategoryDo) Last() (*model.DictsBuildingCategory, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsBuildingCategory), nil
	}
}

func (d dictsBuildingCategoryDo) Find() ([]*model.DictsBuildingCategory, error) {
	result, err := d.DO.Find()
	return result.([]*model.DictsBuildingCategory), err
}

func (d dictsBuildingCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictsBuildingCategory, err error) {
	buf := make([]*model.DictsBuildingCategory, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dictsBuildingCategoryDo) FindInBatches(result *[]*model.DictsBuildingCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dictsBuildingCategoryDo) Attrs(attrs ...field.AssignExpr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dictsBuildingCategoryDo) Assign(attrs ...field.AssignExpr) IDictsBuildingCategoryDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dictsBuildingCategoryDo) Joins(fields ...field.RelationField) IDictsBuildingCategoryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dictsBuildingCategoryDo) Preload(fields ...field.RelationField) IDictsBuildingCategoryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dictsBuildingCategoryDo) FirstOrInit() (*model.DictsBuildingCategory, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsBuildingCategory), nil
	}
}

func (d dictsBuildingCategoryDo) FirstOrCreate() (*model.DictsBuildingCategory, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsBuildingCategory), nil
	}
}

func (d dictsBuildingCategoryDo) FindByPage(offset int, limit int) (result []*model.DictsBuildingCategory, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dictsBuildingCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dictsBuildingCategoryDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dictsBuildingCategoryDo) Delete(models ...*model.DictsBuildingCategory) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dictsBuildingCategoryDo) withDO(do gen.Dao) *dictsBuildingCategoryDo {
	d.DO = *do.(*gen.DO)
	return d
}
