// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed-api/pkg/db/model"
)

func newDictsMaterial(db *gorm.DB, opts ...gen.DOOption) dictsMaterial {
	_dictsMaterial := dictsMaterial{}

	_dictsMaterial.dictsMaterialDo.UseDB(db, opts...)
	_dictsMaterial.dictsMaterialDo.UseModel(&model.DictsMaterial{})

	tableName := _dictsMaterial.dictsMaterialDo.TableName()
	_dictsMaterial.ALL = field.NewAsterisk(tableName)
	_dictsMaterial.ID = field.NewString(tableName, "id")
	_dictsMaterial.Code = field.NewString(tableName, "code")
	_dictsMaterial.Name = field.NewString(tableName, "name")
	_dictsMaterial.IsActive = field.NewBool(tableName, "is_active")

	_dictsMaterial.fillFieldMap()

	return _dictsMaterial
}

type dictsMaterial struct {
	dictsMaterialDo

	ALL      field.Asterisk
	ID       field.String
	Code     field.String
	Name     field.String
	IsActive field.Bool

	fieldMap map[string]field.Expr
}

func (d dictsMaterial) Table(newTableName string) *dictsMaterial {
	d.dictsMaterialDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dictsMaterial) As(alias string) *dictsMaterial {
	d.dictsMaterialDo.DO = *(d.dictsMaterialDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dictsMaterial) updateTableName(table string) *dictsMaterial {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Code = field.NewString(table, "code")
	d.Name = field.NewString(table, "name")
	d.IsActive = field.NewBool(table, "is_active")

	d.fillFieldMap()

	return d
}

func (d *dictsMaterial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dictsMaterial) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["code"] = d.Code
	d.fieldMap["name"] = d.Name
	d.fieldMap["is_active"] = d.IsActive
}

func (d dictsMaterial) clone(db *gorm.DB) dictsMaterial {
	d.dictsMaterialDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dictsMaterial) replaceDB(db *gorm.DB) dictsMaterial {
	d.dictsMaterialDo.ReplaceDB(db)
	return d
}

type dictsMaterialDo struct{ gen.DO }

type IDictsMaterialDo interface {
	gen.SubQuery
	Debug() IDictsMaterialDo
	WithContext(ctx context.Context) IDictsMaterialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDictsMaterialDo
	WriteDB() IDictsMaterialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDictsMaterialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDictsMaterialDo
	Not(conds ...gen.Condition) IDictsMaterialDo
	Or(conds ...gen.Condition) IDictsMaterialDo
	Select(conds ...field.Expr) IDictsMaterialDo
	Where(conds ...gen.Condition) IDictsMaterialDo
	Order(conds ...field.Expr) IDictsMaterialDo
	Distinct(cols ...field.Expr) IDictsMaterialDo
	Omit(cols ...field.Expr) IDictsMaterialDo
	Join(table schema.Tabler, on ...field.Expr) IDictsMaterialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDictsMaterialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDictsMaterialDo
	Group(cols ...field.Expr) IDictsMaterialDo
	Having(conds ...gen.Condition) IDictsMaterialDo
	Limit(limit int) IDictsMaterialDo
	Offset(offset int) IDictsMaterialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDictsMaterialDo
	Unscoped() IDictsMaterialDo
	Create(values ...*model.DictsMaterial) error
	CreateInBatches(values []*model.DictsMaterial, batchSize int) error
	Save(values ...*model.DictsMaterial) error
	First() (*model.DictsMaterial, error)
	Take() (*model.DictsMaterial, error)
	Last() (*model.DictsMaterial, error)
	Find() ([]*model.DictsMaterial, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictsMaterial, err error)
	FindInBatches(result *[]*model.DictsMaterial, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DictsMaterial) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDictsMaterialDo
	Assign(attrs ...field.AssignExpr) IDictsMaterialDo
	Joins(fields ...field.RelationField) IDictsMaterialDo
	Preload(fields ...field.RelationField) IDictsMaterialDo
	FirstOrInit() (*model.DictsMaterial, error)
	FirstOrCreate() (*model.DictsMaterial, error)
	FindByPage(offset int, limit int) (result []*model.DictsMaterial, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDictsMaterialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dictsMaterialDo) Debug() IDictsMaterialDo {
	return d.withDO(d.DO.Debug())
}

func (d dictsMaterialDo) WithContext(ctx context.Context) IDictsMaterialDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dictsMaterialDo) ReadDB() IDictsMaterialDo {
	return d.Clauses(dbresolver.Read)
}

func (d dictsMaterialDo) WriteDB() IDictsMaterialDo {
	return d.Clauses(dbresolver.Write)
}

func (d dictsMaterialDo) Session(config *gorm.Session) IDictsMaterialDo {
	return d.withDO(d.DO.Session(config))
}

func (d dictsMaterialDo) Clauses(conds ...clause.Expression) IDictsMaterialDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dictsMaterialDo) Returning(value interface{}, columns ...string) IDictsMaterialDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dictsMaterialDo) Not(conds ...gen.Condition) IDictsMaterialDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dictsMaterialDo) Or(conds ...gen.Condition) IDictsMaterialDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dictsMaterialDo) Select(conds ...field.Expr) IDictsMaterialDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dictsMaterialDo) Where(conds ...gen.Condition) IDictsMaterialDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dictsMaterialDo) Order(conds ...field.Expr) IDictsMaterialDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dictsMaterialDo) Distinct(cols ...field.Expr) IDictsMaterialDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dictsMaterialDo) Omit(cols ...field.Expr) IDictsMaterialDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dictsMaterialDo) Join(table schema.Tabler, on ...field.Expr) IDictsMaterialDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dictsMaterialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDictsMaterialDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dictsMaterialDo) RightJoin(table schema.Tabler, on ...field.Expr) IDictsMaterialDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dictsMaterialDo) Group(cols ...field.Expr) IDictsMaterialDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dictsMaterialDo) Having(conds ...gen.Condition) IDictsMaterialDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dictsMaterialDo) Limit(limit int) IDictsMaterialDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dictsMaterialDo) Offset(offset int) IDictsMaterialDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dictsMaterialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDictsMaterialDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dictsMaterialDo) Unscoped() IDictsMaterialDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dictsMaterialDo) Create(values ...*model.DictsMaterial) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dictsMaterialDo) CreateInBatches(values []*model.DictsMaterial, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dictsMaterialDo) Save(values ...*model.DictsMaterial) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dictsMaterialDo) First() (*model.DictsMaterial, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsMaterial), nil
	}
}

func (d dictsMaterialDo) Take() (*model.DictsMaterial, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsMaterial), nil
	}
}

func (d dictsMaterialDo) Last() (*model.DictsMaterial, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsMaterial), nil
	}
}

func (d dictsMaterialDo) Find() ([]*model.DictsMaterial, error) {
	result, err := d.DO.Find()
	return result.([]*model.DictsMaterial), err
}

func (d dictsMaterialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictsMaterial, err error) {
	buf := make([]*model.DictsMaterial, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dictsMaterialDo) FindInBatches(result *[]*model.DictsMaterial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dictsMaterialDo) Attrs(attrs ...field.AssignExpr) IDictsMaterialDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dictsMaterialDo) Assign(attrs ...field.AssignExpr) IDictsMaterialDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dictsMaterialDo) Joins(fields ...field.RelationField) IDictsMaterialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dictsMaterialDo) Preload(fields ...field.RelationField) IDictsMaterialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dictsMaterialDo) FirstOrInit() (*model.DictsMaterial, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsMaterial), nil
	}
}

func (d dictsMaterialDo) FirstOrCreate() (*model.DictsMaterial, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictsMaterial), nil
	}
}

func (d dictsMaterialDo) FindByPage(offset int, limit int) (result []*model.DictsMaterial, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dictsMaterialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dictsMaterialDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dictsMaterialDo) Delete(models ...*model.DictsMaterial) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dictsMaterialDo) withDO(do gen.Dao) *dictsMaterialDo {
	d.DO = *do.(*gen.DO)
	return d
}
