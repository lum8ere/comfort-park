// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	Building      *building
	Photo         *photo
	Project       *project
	ProjectPhoto  *projectPhoto
	ProjectReview *projectReview
	Service       *service
	User          *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Building = &Q.Building
	Photo = &Q.Photo
	Project = &Q.Project
	ProjectPhoto = &Q.ProjectPhoto
	ProjectReview = &Q.ProjectReview
	Service = &Q.Service
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		Building:      newBuilding(db, opts...),
		Photo:         newPhoto(db, opts...),
		Project:       newProject(db, opts...),
		ProjectPhoto:  newProjectPhoto(db, opts...),
		ProjectReview: newProjectReview(db, opts...),
		Service:       newService(db, opts...),
		User:          newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Building      building
	Photo         photo
	Project       project
	ProjectPhoto  projectPhoto
	ProjectReview projectReview
	Service       service
	User          user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Building:      q.Building.clone(db),
		Photo:         q.Photo.clone(db),
		Project:       q.Project.clone(db),
		ProjectPhoto:  q.ProjectPhoto.clone(db),
		ProjectReview: q.ProjectReview.clone(db),
		Service:       q.Service.clone(db),
		User:          q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Building:      q.Building.replaceDB(db),
		Photo:         q.Photo.replaceDB(db),
		Project:       q.Project.replaceDB(db),
		ProjectPhoto:  q.ProjectPhoto.replaceDB(db),
		ProjectReview: q.ProjectReview.replaceDB(db),
		Service:       q.Service.replaceDB(db),
		User:          q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Building      IBuildingDo
	Photo         IPhotoDo
	Project       IProjectDo
	ProjectPhoto  IProjectPhotoDo
	ProjectReview IProjectReviewDo
	Service       IServiceDo
	User          IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Building:      q.Building.WithContext(ctx),
		Photo:         q.Photo.WithContext(ctx),
		Project:       q.Project.WithContext(ctx),
		ProjectPhoto:  q.ProjectPhoto.WithContext(ctx),
		ProjectReview: q.ProjectReview.WithContext(ctx),
		Service:       q.Service.WithContext(ctx),
		User:          q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
