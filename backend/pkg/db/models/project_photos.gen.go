// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed-api/pkg/db/model"
)

func newProjectPhoto(db *gorm.DB, opts ...gen.DOOption) projectPhoto {
	_projectPhoto := projectPhoto{}

	_projectPhoto.projectPhotoDo.UseDB(db, opts...)
	_projectPhoto.projectPhotoDo.UseModel(&model.ProjectPhoto{})

	tableName := _projectPhoto.projectPhotoDo.TableName()
	_projectPhoto.ALL = field.NewAsterisk(tableName)
	_projectPhoto.ID = field.NewString(tableName, "id")
	_projectPhoto.RootID = field.NewString(tableName, "root_id")
	_projectPhoto.URL = field.NewString(tableName, "url")
	_projectPhoto.CreatedAt = field.NewTime(tableName, "created_at")

	_projectPhoto.fillFieldMap()

	return _projectPhoto
}

type projectPhoto struct {
	projectPhotoDo

	ALL       field.Asterisk
	ID        field.String
	RootID    field.String
	URL       field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p projectPhoto) Table(newTableName string) *projectPhoto {
	p.projectPhotoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectPhoto) As(alias string) *projectPhoto {
	p.projectPhotoDo.DO = *(p.projectPhotoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectPhoto) updateTableName(table string) *projectPhoto {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.RootID = field.NewString(table, "root_id")
	p.URL = field.NewString(table, "url")
	p.CreatedAt = field.NewTime(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *projectPhoto) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectPhoto) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["root_id"] = p.RootID
	p.fieldMap["url"] = p.URL
	p.fieldMap["created_at"] = p.CreatedAt
}

func (p projectPhoto) clone(db *gorm.DB) projectPhoto {
	p.projectPhotoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectPhoto) replaceDB(db *gorm.DB) projectPhoto {
	p.projectPhotoDo.ReplaceDB(db)
	return p
}

type projectPhotoDo struct{ gen.DO }

type IProjectPhotoDo interface {
	gen.SubQuery
	Debug() IProjectPhotoDo
	WithContext(ctx context.Context) IProjectPhotoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectPhotoDo
	WriteDB() IProjectPhotoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectPhotoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectPhotoDo
	Not(conds ...gen.Condition) IProjectPhotoDo
	Or(conds ...gen.Condition) IProjectPhotoDo
	Select(conds ...field.Expr) IProjectPhotoDo
	Where(conds ...gen.Condition) IProjectPhotoDo
	Order(conds ...field.Expr) IProjectPhotoDo
	Distinct(cols ...field.Expr) IProjectPhotoDo
	Omit(cols ...field.Expr) IProjectPhotoDo
	Join(table schema.Tabler, on ...field.Expr) IProjectPhotoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectPhotoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectPhotoDo
	Group(cols ...field.Expr) IProjectPhotoDo
	Having(conds ...gen.Condition) IProjectPhotoDo
	Limit(limit int) IProjectPhotoDo
	Offset(offset int) IProjectPhotoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectPhotoDo
	Unscoped() IProjectPhotoDo
	Create(values ...*model.ProjectPhoto) error
	CreateInBatches(values []*model.ProjectPhoto, batchSize int) error
	Save(values ...*model.ProjectPhoto) error
	First() (*model.ProjectPhoto, error)
	Take() (*model.ProjectPhoto, error)
	Last() (*model.ProjectPhoto, error)
	Find() ([]*model.ProjectPhoto, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectPhoto, err error)
	FindInBatches(result *[]*model.ProjectPhoto, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectPhoto) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectPhotoDo
	Assign(attrs ...field.AssignExpr) IProjectPhotoDo
	Joins(fields ...field.RelationField) IProjectPhotoDo
	Preload(fields ...field.RelationField) IProjectPhotoDo
	FirstOrInit() (*model.ProjectPhoto, error)
	FirstOrCreate() (*model.ProjectPhoto, error)
	FindByPage(offset int, limit int) (result []*model.ProjectPhoto, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectPhotoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectPhotoDo) Debug() IProjectPhotoDo {
	return p.withDO(p.DO.Debug())
}

func (p projectPhotoDo) WithContext(ctx context.Context) IProjectPhotoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectPhotoDo) ReadDB() IProjectPhotoDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectPhotoDo) WriteDB() IProjectPhotoDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectPhotoDo) Session(config *gorm.Session) IProjectPhotoDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectPhotoDo) Clauses(conds ...clause.Expression) IProjectPhotoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectPhotoDo) Returning(value interface{}, columns ...string) IProjectPhotoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectPhotoDo) Not(conds ...gen.Condition) IProjectPhotoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectPhotoDo) Or(conds ...gen.Condition) IProjectPhotoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectPhotoDo) Select(conds ...field.Expr) IProjectPhotoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectPhotoDo) Where(conds ...gen.Condition) IProjectPhotoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectPhotoDo) Order(conds ...field.Expr) IProjectPhotoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectPhotoDo) Distinct(cols ...field.Expr) IProjectPhotoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectPhotoDo) Omit(cols ...field.Expr) IProjectPhotoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectPhotoDo) Join(table schema.Tabler, on ...field.Expr) IProjectPhotoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectPhotoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectPhotoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectPhotoDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectPhotoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectPhotoDo) Group(cols ...field.Expr) IProjectPhotoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectPhotoDo) Having(conds ...gen.Condition) IProjectPhotoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectPhotoDo) Limit(limit int) IProjectPhotoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectPhotoDo) Offset(offset int) IProjectPhotoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectPhotoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectPhotoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectPhotoDo) Unscoped() IProjectPhotoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectPhotoDo) Create(values ...*model.ProjectPhoto) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectPhotoDo) CreateInBatches(values []*model.ProjectPhoto, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectPhotoDo) Save(values ...*model.ProjectPhoto) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectPhotoDo) First() (*model.ProjectPhoto, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectPhoto), nil
	}
}

func (p projectPhotoDo) Take() (*model.ProjectPhoto, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectPhoto), nil
	}
}

func (p projectPhotoDo) Last() (*model.ProjectPhoto, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectPhoto), nil
	}
}

func (p projectPhotoDo) Find() ([]*model.ProjectPhoto, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectPhoto), err
}

func (p projectPhotoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectPhoto, err error) {
	buf := make([]*model.ProjectPhoto, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectPhotoDo) FindInBatches(result *[]*model.ProjectPhoto, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectPhotoDo) Attrs(attrs ...field.AssignExpr) IProjectPhotoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectPhotoDo) Assign(attrs ...field.AssignExpr) IProjectPhotoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectPhotoDo) Joins(fields ...field.RelationField) IProjectPhotoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectPhotoDo) Preload(fields ...field.RelationField) IProjectPhotoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectPhotoDo) FirstOrInit() (*model.ProjectPhoto, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectPhoto), nil
	}
}

func (p projectPhotoDo) FirstOrCreate() (*model.ProjectPhoto, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectPhoto), nil
	}
}

func (p projectPhotoDo) FindByPage(offset int, limit int) (result []*model.ProjectPhoto, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectPhotoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectPhotoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectPhotoDo) Delete(models ...*model.ProjectPhoto) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectPhotoDo) withDO(do gen.Dao) *projectPhotoDo {
	p.DO = *do.(*gen.DO)
	return p
}
